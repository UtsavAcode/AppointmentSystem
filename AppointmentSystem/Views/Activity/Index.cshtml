@using AppointmentSystem.Models.Domain
@using AppointmentSystem.Models.ViewModel
@model IEnumerable<AllActivitiesViewModel>
@{
    ViewData["Title"] = "Activities";
}

<div class="container mt-4">
    <h2 class="mb-3">@ViewData["Title"]</h2>
    <a href="/Activity/Create" class="btn btn-primary mb-3">Add New Activity</a>

    @if (Model != null && Model.Any())
    {
        <div class="table-responsive">
            <table class="table table-striped table-bordered align-middle">
                <thead class="table-dark">
                    <tr>
                        <th scope="col">Activity ID</th>
                        <th scope="col">Type</th>
                        <th scope="col">Officer</th>
                        <th scope="col">Start Date</th>
                        <th scope="col">Start Time</th>
                        <th scope="col">End Date</th>
                        <th scope="col">End Time</th>
                        <th scope="col">Status</th>
                        <th scope="col">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var activity in Model)
                    {
                        <tr>
                            <td>@activity.ActivityId</td>
                            <td>@activity.Type</td>
                            <td>@activity.OfficerName</td>
                            <td>@activity.StartDate.ToString("yyyy-MM-dd")</td>
                            <td>@activity.StartTime.ToString("HH:mm")</td>
                            <td>@activity.EndDate.ToString("yyyy-MM-dd")</td>
                            <td>@activity.EndTime.ToString("HH:mm")</td>
                            <td>
                                <span class="badge @(activity.Status == ActivityStatus.Cancelled ? "bg-danger" : "bg-success")">
                                    @activity.Status
                                </span>
                            </td>
                            <td>
                                <button class="btn btn-sm btn-warning me-2"
                                        onclick="cancelActivity(@activity.ActivityId)"
                                @(activity.Status == ActivityStatus.Cancelled ? "disabled" : "")>
                                    Cancel
                                </button>

                                <a class="btn btn-sm btn-secondary @(activity.Status == ActivityStatus.Cancelled ? "disabled" : "")"
                                   href="/Activity/Edit/@activity.ActivityId"
                                @(activity.Status == ActivityStatus.Cancelled ? "aria-disabled='true' disabled" : "")>
                                    Edit
                                </a>

                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="alert alert-info">No activities found.</div>
    }
</div>

<script>
    async function cancelActivity(activityId) {
        if (confirm("Are you sure you want to cancel this activity?")) {
            try {
                const response = await fetch('/Activity/Cancel', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(activityId),
                });

                let result;
                try {
                    result = await response.json();
                } catch {
                    throw new Error("Server returned an invalid response.");
                }

                if (response.ok && result.success) {
                    alert(result.message);
                    location.reload();
                } else {
                    throw new Error(result.message || "An unexpected error occurred.");
                }
            } catch (error) {
                console.error("Error:", error);
                alert(error.message);
            }
        }
    }
</script>